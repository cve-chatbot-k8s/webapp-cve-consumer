package main

import (
	"kafka-consumer/internal/database"
	"kafka-consumer/internal/kafka"
	proc "kafka-consumer/internal/processor"
	"os"
	"os/signal"
	"syscall"
	"time"

	kafkaLib "github.com/confluentinc/confluent-kafka-go/kafka"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
)

func main() {
	zerolog.TimeFieldFormat = time.RFC3339
	log.Info().Msg("Starting Kafka Consumer")

	// Initialize Kafka consumer
	consumer, err := kafka.NewConsumer()
	if err != nil {
		log.Fatal().Msgf("Failed to create consumer: %v", err)
	}
	defer consumer.Close()

	// Initialize database service
	dbService := database.New()
	defer dbService.Close()

	// Create a processor instance
	processor := proc.NewProcessor(dbService)

	// Handle system signals for graceful shutdown
	sigchan := make(chan os.Signal, 1)
	signal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)

	run := true
	for run {
		select {
		case sig := <-sigchan:
			log.Info().Msgf("Caught signal %v: terminating", sig)
			run = false
		default:
			// Poll for a message
			msg, err := consumer.ReadMessage(100 * time.Millisecond)
			if err == nil {
				log.Info().Msgf("Message received: %s", string(msg.Value))
				processor.ProcessMessage(msg)
			} else if err.(kafkaLib.Error).Code() != kafkaLib.ErrTimedOut {
				log.Error().Msgf("Consumer error: %v (%v)", err, msg)
			}
		}
	}
}
