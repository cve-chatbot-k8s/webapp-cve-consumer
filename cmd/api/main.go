package main

import (
	"kafka-consumer/internal/kafka"
	"kafka-consumer/internal/server"
	"runtime"
	"sync"
	"time"

	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
)

func main() {
	zerolog.TimeFieldFormat = time.RFC3339
	runtime.GOMAXPROCS(runtime.NumCPU())

	var wg sync.WaitGroup
	wg.Add(1)
	s := server.NewServer()
	go func() {
		defer wg.Done()
		if err := s.ListenAndServe(); err != nil {
			log.Error().Err(err).Msg("Failed to start the server")
		}
	}()

	// Initialize Kafka consumers
	const numConsumers = 10 // Total consumers: 10 (can be changed as needed)
	consumers := make([]*kafka.Consumer, numConsumers)

	for i := 0; i < numConsumers; i++ {
		consumer, err := kafka.NewConsumer()
		if err != nil {
			log.Fatal().Msgf("Failed to create consumer %d: %v", i+1, err)
		}
		log.Info().Msgf("Consumer%d created successfully on topic cve", i+1)
		consumers[i] = consumer
	}

	wg.Add(numConsumers)
	for _, consumer := range consumers {
		go consumer.ConsumeMessages(&wg)
	}

	wg.Wait() // Wait for all goroutines to finish
}
