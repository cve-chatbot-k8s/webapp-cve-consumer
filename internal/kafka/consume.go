package kafka

import (
	"encoding/json"
	"github.com/IBM/sarama"
	"github.com/rs/zerolog/log"
	"kafka-consumer/internal/database"
	"kafka-consumer/internal/models"
	"os"
	"sync"
)

// Consumer struct
type Consumer struct {
	consumer sarama.Consumer
	db       database.Service
}

// NewConsumer initializes and returns a new Kafka consumer
func NewConsumer() (*Consumer, error) {
	config := sarama.NewConfig()
	config.Consumer.Return.Errors = true
	config.Consumer.Offsets.Initial = sarama.OffsetOldest

	client, err := sarama.NewClient([]string{os.Getenv("KAFKA_BOOTSTRAP_SERVERS")}, config)
	if err != nil {
		log.Error().Msgf("Failed to create client: %v", err)
		return nil, err
	}

	consumer, err := sarama.NewConsumerFromClient(client)
	if err != nil {
		log.Error().Msgf("Failed to create consumer: %v", err)
		return nil, err
	}

	return &Consumer{
		consumer: consumer,
		db:       database.New(),
	}, nil
}

// ReadMessage reads a message from the Kafka topic
func (c *Consumer) ReadMessage(partition int32) (sarama.PartitionConsumer, error) {
	partitionConsumer, err := c.consumer.ConsumePartition(os.Getenv("KAFKA_TOPIC"), partition, sarama.OffsetOldest)
	if err != nil {
		log.Error().Msgf("Failed to consume partition: %v", err)
		return nil, err
	}

	return partitionConsumer, nil
}

func (c *Consumer) ConsumeMessages(wg *sync.WaitGroup) {
	partition0, err := c.ReadMessage(0)
	if err != nil {
		log.Error().Msgf("Failed to consume partition: %v", err)
		return
	}

	partition1, err := c.ReadMessage(1)
	if err != nil {
		log.Error().Msgf("Failed to consume partition: %v", err)
		return
	}

	go func() {
		c.processMessages(partition0)
		wg.Done() // Decrease the counter when the goroutine finishes
	}()

	go func() {
		c.processMessages(partition1)
		wg.Done() // Decrease the counter when the goroutine finishes
	}()
}

//func (c *Consumer) ConsumeMessages() {
//	partition0, err := c.ReadMessage(0)
//	if err != nil {
//		log.Error().Msgf("Failed to consume partition: %v", err)
//		return
//	}
//
//	partition1, err := c.ReadMessage(1)
//	if err != nil {
//		log.Error().Msgf("Failed to consume partition: %v", err)
//		return
//	}
//
//	go c.processMessages(partition0)
//	go c.processMessages(partition1)
//
//}

func (c *Consumer) processMessages(partitionConsumer sarama.PartitionConsumer) {
	for message := range partitionConsumer.Messages() {
		var data models.CveRecord
		err := json.Unmarshal(message.Value, &data)
		if err != nil {
			log.Error().Msgf("Failed to unmarshal message value: %v", err)
			continue
		}

		// Insert the message into the database
		err = c.db.InsertCVE(data.CveMetadata.CveID, data.CveMetadata.DatePublished, data.CveMetadata.DateUpdated, message.Value)
		if err != nil {
			log.Error().Msgf("Failed to insert CVE: %v", err)
		}
	}
}

// Close closes the Kafka consumer
func (c *Consumer) Close() {
	c.consumer.Close()
}
