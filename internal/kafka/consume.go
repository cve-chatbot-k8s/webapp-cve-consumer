package kafka

import (
	"time"

	"github.com/confluentinc/confluent-kafka-go/kafka"
	"github.com/rs/zerolog/log"
)

// Consumer struct
type Consumer struct {
	consumer *kafka.Consumer
}

// NewConsumer initializes and returns a new Kafka consumer
func NewConsumer() (*Consumer, error) {
	config := kafka.ConfigMap{
		"bootstrap.servers": "localhost:9092",
		"group.id":          "cve-consumer-group",
		"auto.offset.reset": "earliest",
	}

	consumer, err := kafka.NewConsumer(&config)
	if err != nil {
		log.Error().Msgf("Failed to create consumer: %v", err)
		return nil, err
	}

	err = consumer.Subscribe("cve", nil)
	if err != nil {
		log.Error().Msgf("Failed to subscribe to topic: %v", err)
		return nil, err
	}

	return &Consumer{consumer: consumer}, nil
}

// ReadMessage reads a message from the Kafka topic
func (c *Consumer) ReadMessage(timeout time.Duration) (*kafka.Message, error) {
	return c.consumer.ReadMessage(timeout)
}

// Close closes the Kafka consumer
func (c *Consumer) Close() {
	c.consumer.Close()
}
