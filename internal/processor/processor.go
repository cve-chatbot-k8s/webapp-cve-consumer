package proc

import (
	"encoding/json"
	"kafka-consumer/internal/database"
	"kafka-consumer/internal/models"

	"github.com/confluentinc/confluent-kafka-go/kafka"
	"github.com/rs/zerolog/log"
)

// Processor struct
type Processor struct {
	dbService database.Service
}

// NewProcessor initializes and returns a new Processor
func NewProcessor(dbService database.Service) *Processor {
	return &Processor{dbService: dbService}
}

// ProcessMessage processes the received message and inserts it into the database
func (p *Processor) ProcessMessage(msg *kafka.Message) {
	var cveRecord models.CveRecord
	err := json.Unmarshal(msg.Value, &cveRecord)
	if err != nil {
		log.Error().Msgf("Failed to unmarshal JSON: %v", err)
		return
	}

	formattedJSON, err := json.MarshalIndent(cveRecord, "", "  ")
	if err != nil {
		log.Error().Msgf("Failed to marshal JSON: %v", err)
		return
	}

	log.Info().Msgf("Processing message from topic %s:\n%s", *msg.TopicPartition.Topic, string(formattedJSON))

	// Insert the CVE record into the database
	err = p.dbService.InsertCVE(cveRecord.CveMetadata.CveID, cveRecord.CveMetadata.DatePublished, cveRecord.CveMetadata.DateUpdated, msg.Value)
	if err != nil {
		log.Error().Msgf("Failed to insert CVE record into database: %v", err)
	} else {
		log.Info().Msgf("Successfully inserted CVE record with ID %s into database", cveRecord.CveMetadata.CveID)
	}
}
